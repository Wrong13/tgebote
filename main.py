#@title –ü–æ–ª–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ –¥–ª—è —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è
import aiosqlite
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F
import databaze
import logicca

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–º–µ–Ω–∏—Ç–µ "YOUR_BOT_TOKEN" –Ω–∞ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç BotFather
API_TOKEN = '1462254374:AAFyKg3xtOYwlyj4LBTrhNiIF3c99c0CIkE'

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    #builder = ReplyKeyboardBuilder()
    kb = [
        [types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")],
        [types.KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑!", reply_markup=keyboard)


@dp.callback_query(F.data == "wrong_answer")
async def wrong_answer(callback: types.CallbackQuery):
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_question_index = await databaze.get_quiz_index(callback.from_user.id)
    correct_option = logicca.quiz_data[current_question_index]['correct_option']

    await callback.message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {logicca.quiz_data[current_question_index]['options'][correct_option]}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    current_question_index += 1
    await databaze.update_quiz_index(callback.from_user.id, current_question_index,is_correct=False)


    if current_question_index < len(logicca.quiz_data):
        await logicca.get_question(callback.message, callback.from_user.id)
    else:
        await callback.message.answer("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

@dp.callback_query(F.data == "right_answer")
async def right_answer(callback: types.CallbackQuery):

    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    await callback.message.answer("–í–µ—Ä–Ω–æ!")
    current_question_index = await databaze.get_quiz_index(callback.from_user.id)
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    current_question_index += 1
    await databaze.update_quiz_index(callback.from_user.id, current_question_index,is_correct=True)


    if current_question_index < len(logicca.quiz_data):
        await logicca.get_question(callback.message, callback.from_user.id)
    else:
        await callback.message.answer("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")







# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /quiz
@dp.message(F.text=="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
@dp.message(Command("quiz"))
async def cmd_quiz(message: types.Message):

    await message.answer(f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑!")
    await logicca.new_quiz(message)

@dp.message(F.text=="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@dp.message(Command("stat"))
async def get_stat(message: types.Message):
    correct, total = await databaze.get_user_stats(message.from_user.id)    
    stats_text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n"
        f"‚ùå –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total}\n"
        f"üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {correct/total*100:.1f}%" if total > 0 else "0%"
    )
    
    await message.answer(stats_text)


async def main():

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await databaze.create_table()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())